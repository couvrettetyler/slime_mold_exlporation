End goal: compare the toughness (strain v. stress) of "nightstand" designs generated by: slime mold, slime mold inspired algorithm, and standard structures.

Definition: "Nightstand" --> A support structure that connects 2 parallel surfaces. This structure is an extrusion of a 2D surface. 

Process:
1. Background: Collect equations used in other research used to mimic mold behavior.
	a. There are probably only a few good ways to do this, so we should start finding repeats eventually
	b. Define one or more clear sets of equations that may be used in our problem
2. Algorithm Problem Definition: Define, in mathy terms, the problem we are trying to solve
	a. The problem in words is: maximize the toughness of a nightstand structure
		i. As described in the article on solving the "Shortest Path Problem," there needs to be some "while" loop that iterates or
		optimzes some parameter. It looks like toughness is that parameter
	b. Define Inputs
		i. Some variables we will need: height (between two surfaces), width (of the surface), stress function (definition of the stress
		seen at all points along the top surface)
		ii. Those variables actually sound like the inputs. The function can be normalized to 1, since it should scale??<--
	c. Define Outputs
		iii. The output needs to somehow represent the 2D structure of a nightstand. Like an image would be best.
3. Prepare Testing: Get everything ready to actually stress test the test subjects
	a. Define what input variation we want to study
		i. Height variation
		ii. width variation
		iii. stress function variation <-- Definitely this! The others may be scalable within this variable
	b. Prepare the slime mold
		i. grow the mold and record it's final structure
		ii. Vary the inputs (above) to develop test subjects for each. You're gonna have to try different ways of laying out
		nutrition to see which way best mimics the stress function input you're going for
		iii. Print the test subjects
	c. Prepare the slime mold algorithm
		i. Develop the algorithm using the steps in Step 2
		ii. Test the algorithm against the slime mold to ensure it is close to mimicking it
		iii. Generate outputs for all variations of the inputs
		iv. Print test subjects
	d. Prepare the standard structures
		i. Define the standard structures to be used
		ii. Print the test subjects
	e. Along with printing all test subjects, run FEA on each structure and input variation to have theoretical values
4. Test
	a. Begin with unity stress function (even stress across entire surface)
	b. Analyze initial results
	c. Either adjust test strategy or move on to other input variations
	d. Keep testing
5. Analyze and Publish Results!



Next Steps:
Tyler and Justin find a bunch of slime mold math functions in different papers
Justin finds functions that have to do with the problem (toughness). Ideally some equations that can get us from a 2D image (the output of the algoithm)
	to toughness (the test metric). This may just be an FEA, which would be crazy, but also awesome


Once equations are found, we discuss smooshing the slime mold functions into the toughness functions and generate a plan to generate an algorithm
	The slime mold functions should take in the inputs (height, width, and stress function) and output the output (2D image thing)



